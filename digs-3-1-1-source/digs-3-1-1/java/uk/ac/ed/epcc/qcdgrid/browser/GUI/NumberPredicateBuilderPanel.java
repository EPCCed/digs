/*
 * Copyright (c) 2003 The University of Edinburgh. All rights reserved.
 *
 * Released under the OGSA-DAI Project Software Licence.
 * Please refer to licence.txt for full project software licence.
 */

package uk.ac.ed.epcc.qcdgrid.browser.GUI;

import javax.swing.*;
import java.awt.*;

/**
 * Title:       NumberPredicateBuilderPanel
 * Description: GUI panel for generating predicates to operate on
 * numeric type nodes
 * Copyright:    Copyright (c) 2003
 * Company:      The University of Edinburgh
 * @author James Perry
 * @version 1.0
 */
public class NumberPredicateBuilderPanel extends PredicateBuilderPanel {

    /** a list of possible comparison operations */
    private JList comparators;

    /** a text field to input the number to compare against */
    private JTextField valueInput;

    /** a panel to keep the layout looking nice */
    private JPanel panel;

    /**
     *  Constructor
     */
    public NumberPredicateBuilderPanel() {
	super();

	panel = new JPanel();
	panel.setLayout(new FlowLayout());

	String[] listData = { "<", "<=", "=", ">=", ">" };
	comparators = new JList(listData);
	panel.add(comparators);
	comparators.setSelectedIndex(2);

	valueInput = new JTextField(10);
	panel.add(valueInput);

	add(panel, BorderLayout.CENTER);
    }

    /**
     *  @return the XPath string of this predicate input
     */
    public String getXPath() {
	if (notCheckBox.isSelected()) {
	    return "not(number(.) "+comparators.getSelectedValue()+" "+valueInput.getText()+")";
	}
	else {
	    return "number(.) "+comparators.getSelectedValue()+" "+valueInput.getText();
	}
    }

    /**
     *  disables all the GUI components on this panel
     */
    public void disable() {
	super.disable();

	comparators.setEnabled(false);
	valueInput.setEnabled(false);
    }

    /**
     *  enables all the GUI components on this panel
     */
    public void enable() {
	super.enable();

	comparators.setEnabled(true);
	valueInput.setEnabled(true);
    }

    /**
     *  Initialises the panel with an existing XPath predicate. Used for
     *  editing existing queries
     *  @param pred the predicate to edit
     *  @return true on success, false if the predicate was not generated by this panel
     */
    public boolean setPredicate(String pred) {

	/* Deal with inverse predicate */
	if (pred.substring(0, 4).equals("not(")) {
	    pred = pred.substring(4, pred.length()-1);
	    notCheckBox.setSelected(true);
	}
	
	if (!pred.substring(0, 10).equals("number(.) ")) {
	    /* Not generated by this panel - bail out now */
	    return false;
	}

	/* Work out which comparator is in use */
	int compnum=-1;
	String comp=null;

	for (int i=0; i<comparators.getModel().getSize(); i++) {
	    /* Add a space to stop '>' matching '>=', for example */
	    comp = ((String)comparators.getModel().getElementAt(i))+" ";
	    if (comp.equals(pred.substring(10, 10+comp.length()))) {
		compnum=i;
	    }
	}

	if (compnum<0) {
	    // comparator didn't match any of ours
	    return false;
	}

	comparators.setSelectedIndex(compnum);


	String value = pred.substring(10+comp.length());
	int spc = value.indexOf(' ');
	if (spc>=0) {
	    value=value.substring(spc);
	}
	/* Maybe should complain if there are extra characters after the number... */

	valueInput.setText(value);

	return true;
    }
}
