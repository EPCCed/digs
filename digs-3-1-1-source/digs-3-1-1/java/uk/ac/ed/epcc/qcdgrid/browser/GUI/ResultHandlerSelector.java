/*
 * Copyright (c) 2002 The University of Edinburgh. All rights reserved.
 *
 * Released under the OGSA-DAI Project Software Licence.
 * Please refer to licence.txt for full project software licence.
 */

package uk.ac.ed.epcc.qcdgrid.browser.GUI;

import uk.ac.ed.epcc.qcdgrid.browser.ResultHandlers.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.io.File;
import java.lang.reflect.Modifier;

/**
 * Title: ResultHandlerSelector Description: A dialog box which allows the user
 * to select a result handler from a list Copyright: Copyright (c) 2003 Company:
 * The University of Edinburgh
 * 
 * @author James Perry
 * @version 1.0
 */

public class ResultHandlerSelector extends JDialog {

  private static final String RESULT_HANDLER_PREFIX = "/uk/ac/ed/epcc/qcdgrid/browser/ResultHandlers/";

  /** Widgets, mostly generated by JBuilder */
  JPanel jPanel2 = new JPanel();

  JButton jOK = new JButton();

  JScrollPane jScrollPane1 = new JScrollPane();

  Vector resultHandlerList = new Vector();

  JList jResultHandlerList;

  JLabel jLabel1 = new JLabel();

  /** The full class name of the currently selected handler */
  String selectedHandler = null;

  /**
   * Class constructor. Creates a new result handler selector dialogue
   * 
   * @exception Exception
   *              thrown when problems occur instantiating the plugins
   */
  public ResultHandlerSelector() throws Exception {
    String resultPluginPath = null;
    ArrayList jarsToProcess = new ArrayList();
    String classpath = System.getProperty("java.class.path");
    int lastColon = 0;

    char separator = ':';

    /* attempt to handle Windows/UNIX differences */
    if (classpath.indexOf(';') >= 0) {
	separator = ';';
    }

    classpath.replace('\\', '/');

    int nextColon = classpath.indexOf(separator);

    /* Search classpath for result handler plugins */
    while (lastColon < classpath.length()) {
      String classPathComponent = classpath.substring(lastColon, nextColon);
      if (!classPathComponent.endsWith(".jar")) {
        File browserDir = new File(classPathComponent
            + "/uk/ac/ed/epcc/qcdgrid/browser/");
        if (browserDir.exists()) {
          File handlerDir = new File(
              classPathComponent + RESULT_HANDLER_PREFIX);
          if (handlerDir.exists()) {
            resultPluginPath = classPathComponent
                + RESULT_HANDLER_PREFIX;
          }
        }
      } else {
        //System.out.println(classPathComponent);
        jarsToProcess.add(classPathComponent);
      }
      lastColon = nextColon + 1;
      nextColon = classpath.indexOf(separator, lastColon);
      if (nextColon < 0)
        nextColon = classpath.length();
    }

    if (resultPluginPath == null) {
      System.out
          .println("Warning: didn't find result handler plugins, using default path and JARs.");
      resultPluginPath = "/opt/qcdgrid/java/uk/ac/ed/epcc/qcdgrid/browser/ResultHandlers";
    } 
    else {
      File resultPluginDirectory = new File(resultPluginPath);
      String[] files = resultPluginDirectory.list();
      for (int i = 0; i < files.length; i++) {
        if ((files[i].endsWith(".class"))
            && (!files[i].equals("CountResultHandler.class"))) {
          /* remove '.class' extension */
          String className = files[i].substring(0, files[i].length() - 6);

          /*
           * various exceptions could occur while processing classes. Make sure
           * they don't crash the whole browser
           */
          try {
            Class c = Class
                .forName("uk.ac.ed.epcc.qcdgrid.browser.ResultHandlers."
                    + className);
            if (isResultHandler(c)) {
              /* instantiate class and get its description */
              ResultHandler rh = (ResultHandler) c.newInstance();
              /* add its name and description to the list */
              String handlerName = className + " - " + rh.getDescription();
              resultHandlerList.add(handlerName);
            }
          } catch (Exception e) {
            System.err.println("Exception occurred while processing class "
                + className + ": " + e);
          } catch (Error e) {
            System.err.println("Error occurred while processing class "
                + className + ": " + e);
          }
        }
      }
    }

    if(jarsToProcess.size()>0){
      processJars(jarsToProcess, resultHandlerList);    
    }
    jResultHandlerList = new JList(resultHandlerList);

    jbInit();
    pack();
  }

  private void processJars(ArrayList jarsToProcess, Vector resultHandlerList) {
    for (int i = 0; i < jarsToProcess.size(); i++) {
      String jarPath = (String) jarsToProcess.get(i);
      try{
        JarFile jf = new JarFile(jarPath);
        Enumeration enumerator = jf.entries();
        while(enumerator.hasMoreElements()){
          Object nextElement = enumerator.nextElement();
          String elementAsString = nextElement.toString();
          if(elementAsString.startsWith(RESULT_HANDLER_PREFIX.substring(1))){
            if(elementAsString.endsWith(".class")
                &&!elementAsString.equals("CountResultHandler.class")){
              String forName = elementAsString.substring(0, 
                  elementAsString.length()-6);
              forName = forName.replace('/', '.');
	      
              Class cl = null;
              try{
                cl = Class.forName(forName);                
                if(isResultHandler(cl)){
                  ResultHandler rh = (ResultHandler) cl.newInstance();
                  /* add its name and description to the list */
                  String className = forName.substring(forName.lastIndexOf('.')+1);
                  String handlerName = className + " - " + rh.getDescription();
                  if(!resultHandlerList.contains(handlerName)){
                    resultHandlerList.add(handlerName);                  
                  }
                }
                else{
                }
              }
              catch(ClassNotFoundException cnfe){
                // It doesn't really matter.
                System.out.println(forName + " not found.");                
              }      
              catch(InstantiationException ie){
                System.out.println("Warning - could not instantiate result handler "
                    + forName + " (InstantiationException).");
              }
              catch(IllegalAccessException iae){
                System.out.println("Warning - could not instantiate result handler "
                    + forName + " (IllegalAccessException).");
              }
            }
          }
        }
      }
      catch(java.io.IOException ioe){
        System.out.println("Could not read jar " + jarPath);
      }
    }
  }

  private boolean isResultHandler(Class c) {
    /* check it's not abstract */
    boolean isResultHandler = false;

    int mods = c.getModifiers();
    if (!Modifier.isAbstract(mods)) {
      /* check it's a subclass of ResultHandler */
      isResultHandler = false;
      Class sc = c.getSuperclass();
      while (!sc.getName().equals("java.lang.Object")) {
        if (sc.getName().equals(
            "uk.ac.ed.epcc.qcdgrid.browser.ResultHandlers.ResultHandler")) {
          isResultHandler = true;
        }
        sc = sc.getSuperclass();
      }
    }
    return isResultHandler;
  }

  /** Initialises the GUI of the dialogue. Mostly autogenerated by JBuilder */
  private void jbInit() throws Exception {
    jOK.setText("OK");
    jOK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jOK_actionPerformed(e);
      }
    });
    jLabel1.setText("Please choose a result handler:");
    jResultHandlerList.setSelectedIndex(0);
    jScrollPane1.setPreferredSize(new Dimension(400, 200));
    this.getContentPane().add(jPanel2, BorderLayout.SOUTH);
    jPanel2.add(jOK, null);
    this.getContentPane().add(jScrollPane1, BorderLayout.CENTER);
    jScrollPane1.getViewport().add(jResultHandlerList, null);
    this.getContentPane().add(jLabel1, BorderLayout.NORTH);
  }

  /**
   * @return A result handler object of the selected type
   * @exception Exception
   *              thrown if problems occur instantiating the object
   */
  public ResultHandler getSelectedHandler() throws Exception {
    ResultHandler rh = null;
    /* try to instatiate the class selected and return the resulting object */
    if(selectedHandler != null){
      Class c = Class.forName(selectedHandler);
      rh = (ResultHandler) c.newInstance();
    }
    return rh;
  }

  /** Handles the OK button being clicked */
  void jOK_actionPerformed(ActionEvent e) {
    int classNameEnd;
    String str;
    str = (String) jResultHandlerList.getSelectedValue();

    if (str != null) {
	/*
	 * strip the class name off the front of the string and make it into a full
	 * one
	 */
	classNameEnd = str.indexOf(' ');
	selectedHandler = "uk.ac.ed.epcc.qcdgrid.browser.ResultHandlers."
	    + str.substring(0, classNameEnd);
    }
    else {
	selectedHandler = null;
    }

    /* dialogue finished now */
    dispose();
  }
}
